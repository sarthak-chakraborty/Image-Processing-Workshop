#include "stdafx.h"
#include <stdio.h>
#include <iostream>
#include<math.h>
#include <opencv2\highgui\highgui.hpp>
#include <opencv2\imgproc\imgproc.hpp>
#include <opencv2\core\core.hpp>

using namespace cv;
using namespace std;

/*
int isValid(int i, int j, int a, int b)
{
	if (i<0 || j<0 || j>b || i>a)
		return 0;

	return 1;
}

void edge(int v, void *data)
{
	Mat *img = (Mat *)data;

	int m1[3][3] = { { -3, 0, 3 }, { -10, 0, 10 }, { -3, 0, 3 } };
	int m2[3][3] = { { -3, -10, -3 }, { 0, 0, 0 }, { 3, 10, 3 } };

	int m3[3][3] = { { -1, 0, 1 }, { -2, 0, 2 }, { -1, 0, 1 } };
	int m4[3][3] = { { -1, -2, -1 }, { 0, 0, 0 }, { 1, 2, 1 } };

	Mat edge1(img->rows, img->cols, CV_8UC1);
	Mat edge2(img->rows, img->cols, CV_8UC1);

	int i, j, k, l,g1=0,g2=0;
	
	for (i = 0; i < img->rows - 1; i++)
	{

		for (j = 0; j < img->cols - 1; j++)
		{

			int gx1 = 0, gx2 = 0;
			int gy1 = 0, gy2 = 0;
			for (k = -1; k <= 1; k++)
			{
				for (l = -1; l <= 1; l++)
				{
					if (isValid(i + k, j + l, img->rows, img->cols))
					{
						gx1 += img->at<Vec3b>(i + k, j + l)[0] * m1[k + 1][l + 1];
						gy1 += img->at<Vec3b>(i + k, j + l)[1] * m2[k + 1][l + 1];

						gx2 += img->at<Vec3b>(i + k, j + l)[0] * m3[k + 1][l + 1];
						gy2 += img->at<Vec3b>(i + k, j + l)[1] * m4[k + 1][l + 1];
					}
				}
			}
			g1 = fabs((float)gx1) + fabs((float)gy1);
			g2 = fabs((float)gx2) + fabs((float)gy2);
			//g1 = sqrt(gx1*gx1 + gy1*gy1);
			//g2 = sqrt(gx2*gx2 + gy2*gy2);

			if (g1 <= v)
				edge1.at<uchar>(i, j) = 0;
			else
				edge1.at<uchar>(i, j) = 255;

			if (g2 <= v)
				edge2.at<uchar>(i, j) = 0;
			else
				edge2.at<uchar>(i, j) = 255;
		}
	}
	imshow("Edge Detection 1", edge1);
	imshow("Edge Detection 2", edge2);
	waitKey(1);
}

void main()
{
	Mat image = imread("F:\\pics\\eiffel.jpg", CV_LOAD_IMAGE_COLOR);
	imshow("Original", image);

	int v = 0;
	namedWindow("Edge Detection");

	createTrackbar("Gradient", "Edge Detection", &v, 255, edge, (void*)(&image));
	waitKey(0);
}*/