DAY 3:

	We were first asked to show the previous day's assignments which was checked by the mentors. We were then taught
about a new concept of creating a trackbar with six arguments. Its prototype is:
    createTrackbar("Trackbar_Name", "Window_Name", &var, MAX_VAL, f_name, (void *)data);

We were asked to perform mean blur on a picture using trackbar which controls the kernel size.
Pseudo Code is:
{
int v = 0;
namedWindow("Blur");

createTrackbar("Blur", "Blur", &v, 5, blur_image, (void*)(&image));
}

void blur_image(int v,void* data)
{
	Mat *img = (Mat *)data;

	Mat blur_img((*img).rows, (*img).cols, CV_8UC3,255);

	int i, j, k, l, c;

	for (i = 0; i < (*img).rows - v; i++)
	{

		for (j = 0; j < (*img).cols-v; j++)
		{

			int sum[3] = { 0, 0, 0 };
			c = 0;
			for (k = -v; k <= v; k++)
			{
				for (l = -v; l <= v; l++)
				{
					if (isValid(i + k, j + l, (*img).rows, (*img).cols))
					{
						sum[0] += (*img).at<Vec3b>(i + k, j + l)[0];
						sum[1] += (*img).at<Vec3b>(i + k, j + l)[1];
						sum[2] += (*img).at<Vec3b>(i + k, j + l)[2];
						c++;
					}

				}

			}
			blur_img.at<Vec3b>(i, j)[0] = sum[0] / c;
			blur_img.at<Vec3b>(i, j)[1] = sum[1] / c;
			blur_img.at<Vec3b>(i, j)[2] = sum[2] / c;

		}

	}

	imshow("Blur", blur_img);
	waitKey(1);
}

	We were then taught how to do Gaussian blur using a 2D matrix.
The matrix for Gaussian Blur is:
  1/16   1/8   1/16
( 1/8    1/4   1/8  )
  1/16   1/8   1/16
Pseudo Code is:
Mat blur(Mat img)
{
	float gauss[3][3] = { { 1.0 / 16, 1.0 / 8, 1.0 / 16 }, { 1.0 / 8, 1.0 / 4, 1.0 / 8 }, { 1.0 / 16, 1.0 / 8, 1.0 / 16 } };

	Mat blur_img(img.rows, img.cols, CV_8UC3,255);

	int i, j, k, l;
	float c = 0;

	for (i = 0; i < img.rows-1; i++)
	{
		for (j = 0; j < img.cols-1; j++)
		{
			float sum[3] = { 0, 0, 0 };
			c = 0;
			for (k = -1; k <= 1; k++)
			{
				for (l = -1; l <= 1; l++)
				{
					if (isValid(i + k, j + l, img))
					{
						sum[0] += img.at<Vec3b>(i + k, j + l)[0] * gauss[k + 1][ l + 1];
						sum[1] += img.at<Vec3b>(i + k, j + l)[1] * gauss[k + 1][ l + 1];
						sum[2] += img.at<Vec3b>(i + k, j + l)[2] * gauss[k + 1][ l + 1];
						c += gauss[k + 1][ l + 1];
					}
				}
			}
			blur_img.at<Vec3b>(i, j)[0] = sum[0];
			blur_img.at<Vec3b>(i, j)[1] = sum[1];
			blur_img.at<Vec3b>(i, j)[2] = sum[2];
		}
	}
	return blur_img;
}

	We were then about how to detect an edge using gradient Gx and Gy and then use the formula G=|Gx| + |Gy|  to detect
any edge.
	We were taught two methods of edge detection, namely, Prewitt's method and Sobel Filter.
Pseudo Code for Prewitt's Method is:
void edge(int v,void *data)
{
	Mat *img = (Mat *)data;

	int m1[3][3] = { { -1, 0, 1 }, { -1, 0, 1 }, { -1, 0, 1 } };
	int m2[3][3] = { { -1, -1, -1 }, { 0, 0, 0 }, { 1, 1, 1 } };

	Mat edge(img->rows, img->cols, CV_8UC1);
	int i, j, k, l;
	int c = 0, g = 0;

	for (i = 0; i < img->rows-1; i++)
	{

		for (j = 0; j < img->cols-1; j++)
		{

			int gx = 0;
			int gy = 0;
			for (k = -1; k <= 1; k++)
			{
				for (l = -1; l <= 1; l++)
				{
					if (isValid(i + k, j + l, img->rows, img->cols))
					{
						gx += img->at<Vec3b>(i + k, j + l)[0] * m1[k + 1][l + 1];
						gy += img->at<Vec3b>(i + k, j + l)[1] * m2[k + 1][l + 1];
					}
				}
			}
			g = fabs((float)gx) + fabs((float)gy);
			//g = sqrt(gx*gx + gy*gy);

			if (g <= v)
				edge.at<uchar>(i, j) = 0;
			else
				edge.at<uchar>(i, j) = 255;
		}
	}
	imshow("Edge Detection", edge);
	waitKey(1);
}

 Sobel Filter has the matrix: 
int m3[3][3] = { { -1, 0, 1 }, { -2, 0, 2 }, { -1, 0, 1 } };
int m4[3][3] = { { -1, -2, -1 }, { 0, 0, 0 }, { 1, 2, 1 } };

	We were then taught about the algorithm of Canny Edge Detection which has the following steps:-
i) Gaussian Blur 
ii) Prewitt/Sobel Filter
iii) Non maximum Suppression
iv) Thresholding
     Canny Filter can be done using the in-built function
         Canny(img, output_img, lth, hth, kernel_size);  where, lth=Lower Threshold, Hth=Higher Threshold

	Thus after the end of Day 3, I get to learn how to blur using trackbar and how to detect an edge.

We were also given some assignments, they are:
i) Read about stacks and queues.
ii) Complete your implementation of canny function, if you haven't already.
iii) Try colour extraction.