#include "stdafx.h"
#include <stdio.h>
#include <iostream>
#include<math.h>
#include <opencv2\highgui\highgui.hpp>
#include <opencv2\imgproc\imgproc.hpp>
#include <opencv2\core\core.hpp>

using namespace cv;
using namespace std;

/*
int isValid(int i, int j, int r, int c)
{
	if (i<0 || j<0 || j>c || i>r)
	return 0;

	return 1;
}

void blur_image(int v,void* data)
{
	Mat *img = (Mat *)data;

	Mat blur_img((*img).rows, (*img).cols, CV_8UC3,255);

	int i, j, k, l, c;

	for (i = 0; i < (*img).rows - v; i++)
	{

		for (j = 0; j < (*img).cols-v; j++)
		{

			int sum[3] = { 0, 0, 0 };
			c = 0;
			for (k = -v; k <= v; k++)
			{
				for (l = -v; l <= v; l++)
				{
					if (isValid(i + k, j + l, (*img).rows, (*img).cols))
					{
						sum[0] += (*img).at<Vec3b>(i + k, j + l)[0];
						sum[1] += (*img).at<Vec3b>(i + k, j + l)[1];
						sum[2] += (*img).at<Vec3b>(i + k, j + l)[2];
						c++;
					}

				}

			}
			blur_img.at<Vec3b>(i, j)[0] = sum[0] / c;
			blur_img.at<Vec3b>(i, j)[1] = sum[1] / c;
			blur_img.at<Vec3b>(i, j)[2] = sum[2] / c;

		}

	}

	imshow("Blur", blur_img);
	waitKey(1);
}

void main()
{
	Mat image = imread("F:\\pics\\eiffel.jpg", CV_LOAD_IMAGE_COLOR);
	imshow("Original", image);

	int v = 0;
	namedWindow("Blur");

	createTrackbar("Blur", "Blur", &v, 5, blur_image, (void*)(&image));
	waitKey(0);
}*/