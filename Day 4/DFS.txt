#include "stdafx.h"
#include <stdio.h>
#include <iostream>
#include<math.h>
#include <stdlib.h>
#include <opencv2\highgui\highgui.hpp>
#include <opencv2\imgproc\imgproc.hpp>
#include <opencv2\core\core.hpp>

using namespace cv;
using namespace std;

/*
Mat image = imread("F:\\pics\\sampleimage2.png", CV_LOAD_IMAGE_COLOR);
Mat bin(image.rows, image.cols, CV_8UC1, Scalar(0));
int t = 0;

int isValid(int i, int j)
{
	if (i<0 || j<0 || j>image.cols || i>image.rows)
		return 0;

	return 1;
}


void dfs(int i, int j, int c)
{
	bin.at<uchar>(i, j) = c;
	
	int k, l;
	
	for (k = -1; k <= 1; k++)
	{
		for (l = -1; l <= 1; l++)
		{
			if (isValid(i + k, j + l))
			{
				if (!(image.at<Vec3b>(i + k, j + l)[0] == 255 && image.at<Vec3b>(i + k, j + l)[1] == 255 && image.at<Vec3b>(i + k, j + l)[2] == 255))
				{
					if (bin.at<uchar>(i + k, j + l) == 0)
					{
						if (image.at<Vec3b>(i + k, j + l)[0] >= (image.at<Vec3b>(i, j)[0] - t) && image.at<Vec3b>(i + k, j + l)[0] <= (image.at<Vec3b>(i, j)[0] + t) && image.at<Vec3b>(i + k, j + l)[1] >= (image.at<Vec3b>(i, j)[1] - t) && image.at<Vec3b>(i + k, j + l)[1] <= (image.at<Vec3b>(i, j)[1] + t) && image.at<Vec3b>(i + k, j + l)[2] >= (image.at<Vec3b>(i, j)[2] - t) && image.at<Vec3b>(i + k, j + l)[2] <= (image.at<Vec3b>(i, j)[2] + t))
						{
							dfs(i + k, j + l, c);
						}
					}
					else
						continue;
				}
				else
					continue;
			}
		}
	}
}


void objects(int t, void *data)
{
	Mat *img = (Mat *)data;

	int i, j, c = 0;
	
	for (i = 0; i < bin.rows; i++)
	{
		for (j = 0; j < bin.cols; j++)
		{
			bin.at<uchar>(i, j) = 0;
		}
	}
	
	for (i = 0; i < image.rows; i++)
	{
		for (j = 0; j < image.cols; j++)
		{
			
			if (!(image.at<Vec3b>(i, j)[0] == 255 && image.at<Vec3b>(i, j)[1] == 255 && image.at<Vec3b>(i, j)[2] == 255))
			{
				
				if (bin.at<uchar>(i, j)==0)
				{
					c++;
					dfs(i, j, c);
				}
				
			}
		}
	}

	for (i = 0; i < bin.rows; i++)
	{
		for (j = 0; j < bin.cols; j++)
		{
			if (bin.at<uchar>(i, j)>0)
				bin.at<uchar>(i, j) = 255 / bin.at<uchar>(i, j);
		}
	}
	imshow("Objects", bin);
	waitKey(1);
}


void main()
{
	imshow("Original", image);

	namedWindow("Objects", WINDOW_NORMAL);

	createTrackbar("Tolerance", "Objects", &t, 100, objects, NULL);
	waitKey(0);
}*/